// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDictReader is a mock of DictReader interface.
type MockDictReader struct {
	ctrl     *gomock.Controller
	recorder *MockDictReaderMockRecorder
}

// MockDictReaderMockRecorder is the mock recorder for MockDictReader.
type MockDictReaderMockRecorder struct {
	mock *MockDictReader
}

// NewMockDictReader creates a new mock instance.
func NewMockDictReader(ctrl *gomock.Controller) *MockDictReader {
	mock := &MockDictReader{ctrl: ctrl}
	mock.recorder = &MockDictReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDictReader) EXPECT() *MockDictReaderMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockDictReader) Run(handler func(string) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockDictReaderMockRecorder) Run(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDictReader)(nil).Run), handler)
}

// MockDistanceCalculator is a mock of DistanceCalculator interface.
type MockDistanceCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockDistanceCalculatorMockRecorder
}

// MockDistanceCalculatorMockRecorder is the mock recorder for MockDistanceCalculator.
type MockDistanceCalculatorMockRecorder struct {
	mock *MockDistanceCalculator
}

// NewMockDistanceCalculator creates a new mock instance.
func NewMockDistanceCalculator(ctrl *gomock.Controller) *MockDistanceCalculator {
	mock := &MockDistanceCalculator{ctrl: ctrl}
	mock.recorder = &MockDistanceCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistanceCalculator) EXPECT() *MockDistanceCalculatorMockRecorder {
	return m.recorder
}

// GetDistance mocks base method.
func (m *MockDistanceCalculator) GetDistance(a, b byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistance", a, b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistance indicates an expected call of GetDistance.
func (mr *MockDistanceCalculatorMockRecorder) GetDistance(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistance", reflect.TypeOf((*MockDistanceCalculator)(nil).GetDistance), a, b)
}

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// IncFilteredWords mocks base method.
func (m *MockMetrics) IncFilteredWords() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncFilteredWords")
}

// IncFilteredWords indicates an expected call of IncFilteredWords.
func (mr *MockMetricsMockRecorder) IncFilteredWords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncFilteredWords", reflect.TypeOf((*MockMetrics)(nil).IncFilteredWords))
}

// IncWords mocks base method.
func (m *MockMetrics) IncWords() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncWords")
}

// IncWords indicates an expected call of IncWords.
func (mr *MockMetricsMockRecorder) IncWords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncWords", reflect.TypeOf((*MockMetrics)(nil).IncWords))
}
